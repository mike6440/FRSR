#!/usr/bin/expect --
#Z_frsr_v6

set PROGRAMNAME Z_frsr
set VERSION 2
set EDITDATE 170805
# v2 add simulation 

puts "
RUN PROGRAM $PROGRAMNAME, VERSION $VERSION, EDITDATE $EDITDATE"

set loguser 0;		#   test 0-quiet, 1=verbose
log_user $loguser;

		# SETUP FILE DEFINED
set setupfile  [lindex $argv 0]
		## SEE IF THE SETUP FILE EXISTS
if [catch {open $setupfile} sufile] {
	puts "Setup file open fails, exit 1"
	exit 1
}
# else {
#	puts "SETUP FILE $setupfile --- EXISTS"
#}

global FRSR FRSRPID FRSRAV FRSRAVPID
global infoname
#========================================================
#		PROCEDURE TO SIMULATE FRSR -- v2
#========================================================
proc SpawnFrsrSimulate { } {
	global FRSR FRSRPID infoname
		# Spawn simulate_prp
	set FRSRID [spawn perl simulate_frsr]
	set FRSR $spawn_id
	write_info $infoname "Spawn simulate_frsr"
}
#========================================================
		# PROCEDURE TO CONNECT TO FRSR
#============================================================
proc SpawnFrsr { hub_url frsrport} {
	global FRSR FRSRPID infoname
	set str [spawn kermfrsr]
	set FRSR [lindex $str 0];    
	set FRSRPID [lindex $str 1];
	write_info $infoname "SPAWN FRSR KERMIT, IP=$hub_url, port=$frsrport, spawn_id=$FRSR, pid=$FRSRPID"
}
#==========================================
#   PROCEDURE TO START AVGFRSR PROGRAM
#==========================================
# proc SpawnAvgFrsr { setupfile } {
# 	global FRSRAV  FRSRAVPID infoname
# 	set FRSRAVPID [spawn perl avgfrsr $setupfile]
# 	set FRSRAV $spawn_id
# 	write_info $infoname "SPAWN FRSRAV spawn_id = $FRSRAV,  pid=$FRSRAVPID"
# 			# WAIT FOR THE STARTUP PROMPT
# 	set timeout 5
# 	expect {
# 				# REPLY FROM AVG PROGRAM
# 		"avgfrsr--" {
# 			send_user "AVGFRSR is ready\n"
# 		}
# 	}
# }
#====================================================================
		# PROCEDURE WRITE_INFO
		# input
		#  fname = fullfile name towrite the info string
		#  str=the string to write
		# call:
		# write_info "/tmp/info" "This is a test."
#=====================================================================
proc write_info {fname str} {
	set str [timestamp -gmt -format "%Y%m%dT%H%M%SZ,"]$str
	exec echo $str >> $fname
	return $str
}
#========================================================
		# PROCEDURE TO CONNECT TO FRSR (COM1) v3
#============================================================
proc SpawnFrsr { } {
	global FRSR FRSRPID
		# Find the USB port
	set usbport [exec perl FindUSBPort 1]
		# START PROCESS -- KERMIT FOR RS232
	set FRSRPID [spawn kermit]
	set FRSR $spawn_id
	set timeout 2
	expect {
		timeout {"KERMIT FAILS TO OPEN\n"; exit 1}
		">>"
	}
	write_info "SPAWN FRSR KERMIT, spawn_id = $FRSR,  pid = $FRSRPID"
		# OPEN line
	send "set line $usbport\r"
	expect ">>"
	write_info "RS232 CONNECT TO $usbport"
		# speed
	send "set speed 115200\r"
	expect ">>"
		# duplex
	send "set duplex half\r"
	expect ">>"
		# flow control
	send "set flow none\r"
	expect ">>"
		# carrier watch
	send "set carrier-watch off\r"
	expect ">>"
	## CONNECT 
	send "connect\r"
	expect {
		"Conn*---" { write_info "SERIAL CONNECTED TO $usbport"; }  
		timeout {send_user "FRSR SERIAL TIMEOUT, NO CONNECT"; exit 1}
	}
}
#==================== END PROCEDURES =============================================

exec echo "START FRSR3 [timestamp -gmt -format "%Y%m%d,%H%M%S"]" > /tmp/sbd

		#============
		# DATAPATH
		#==============
spawn -noecho getsetupinfo $setupfile "RT OUT PATH"
expect -re "(\.*)(\r)";
set datapath $expect_out(1,string)

	# INFONAME
set infoname "$env(DAQDATAFOLDER)/info.txt";
send_user "INFONAME: $infoname\n";
write_info $infoname "  ========== BEGIN PROGRAM $PROGRAMNAME ============="
write_info $infoname "PROGRAM $PROGRAMNAME, Version $VERSION, Editdate $EDITDATE, Runtime [timestamp -gmt -format "%Y%m%d,%H%M%S"]"
write_info $infoname "INFORMATION FILE: $infoname"
write_info $infoname  "RT OUT PATH: $datapath"

	# PDS SERIAL HUB URL AND OFFSET
spawn -noecho getsetupinfo $setupfile "SERIAL HUB URL"
expect -re "(\.*)(\r)";
set hub_url $expect_out(1,string)
write_info $infoname  "SERIAL HUB URL: $hub_url"

	# CALIBRATION FLAG
spawn -noecho getsetupinfo $setupfile "CALIBRATION EMISSIVITY"
expect -re "(\.*)(\r)";
set e_cal $expect_out(1,string)

	# OPEN SERIAL CONNECTION - v2 include simulate
spawn -noecho getsetupinfo $setupfile "SIMULATEFLAG"
expect -re "(\.*)(\r)";
set simulateflag $expect_out(1,string)
send_user "SIMULATEFLAG = $simulateflag\n"
if { $simulateflag == 1 } { 
	send_user "SIMULATE_FRSR\n";
	SpawnFrsrSimulate;
} else {
	send_user "STANDARD FRSR SERIAL\n";
	#SpawnFrsr;
}
		## PLATFORM NAME
spawn -noecho getsetupinfo $setupfile "PLATFORM NAME"
expect -re "(\.*)(\r)";
write_info $infoname  "PLATFORM NAME: $expect_out(1,string)"
		## LOCATION ON PLATFORM
spawn -noecho getsetupinfo $setupfile "LOCATION ON PLATFORM"
expect -re "(\.*)(\r)";
write_info $infoname  "LOCATION ON PLATFORM: $expect_out(1,string)"
		## HEIGHT ABOVE SEA LEVEL
spawn -noecho getsetupinfo $setupfile "HEIGHT ABOVE SEA LEVEL"
expect -re "(\.*)(\r)";
write_info $infoname  "HEIGHT ABOVE SEA LEVEL: $expect_out(1,string)"
		## EXPERIMENT NAME
spawn -noecho getsetupinfo $setupfile "EXPERIMENT NAME"
expect -re "(\.*)(\r)";
set expname $expect_out(1,string)
write_info $infoname  "EXPERIMENT NAME: $expname"
		## GEOGRAPHIC LOCATION
spawn -noecho getsetupinfo $setupfile "GEOGRAPHIC LOCATION"
expect -re "(\.*)(\r)";
write_info $infoname  "GEOGRAPHIC LOCATION: $expect_out(1,string)"
		## FRSR PORT
spawn -noecho getsetupinfo $setupfile "FRSR HUB COM NUMBER"
expect -re "(\.*)(\r)";
set frsrport $expect_out(1,string)
write_info $infoname  "FRSR HUB COM NUMBER: $frsrport"
	#=================
	# OPEN SET FILE NAMES AND NOTE TIME
	#=================
	# day0 = START JULIAN DAY
set day0 0
	# OPEN SERIAL PORTS
#SpawnFrsr $hub_url $frsrport 
	# OPEN AVG PROGRAMS
#SpawnAvgFrsr $setupfile 
	#====================
	# TIMING PARAMETERS
	#====================
	# SET dt0 SO THE FIRST AVG WILL BE TRANSMITTED
# set dt0 [expr [timestamp -gmt] -100]
set timeout 30		;# leave enough time for the scan drum to move
	# =====================
	# MAIN LOOP
	#======================
write_info $infoname "===== BEGIN MAIN LOOP ====="
send_user "===== BEGIN MAIN LOOP =====\n"
	#=================
	# EXPECT LOOP
	#=================
while 1 {
	# LOOP TIME $dt
	set dt [timestamp -gmt]
		# CHECK FOR A NEW DAY -- NEW FILES
	set day1 [timestamp -format "%j" -seconds $dt]
	if {$day1 != $day0} {
		set day0 $day1
		set fname [timestamp -format "%y%m%d" -seconds $dt]
		write_info $infoname "NEW DAY $fname";
		set rwname "$datapath/frsr_raw_$fname.txt";
		write_info $infoname "---NEW DAY $fname---"
		write_info $infoname "rwname = $rwname"
	}
	#================
	# EXPECT FUNCTION -- WAITING FOR RESPONSE
	# ===============
	expect { 
		-i $FRSR 
		-re "\\\$FSR03...*\\*..\\n?" {
			set rawstr [string trimright $expect_out(0,string)]
			send_user "$rawstr\n";
			set F [open $rwname a 0600]
			puts $F $rawstr  ;
			close $F
		}
	}
}

